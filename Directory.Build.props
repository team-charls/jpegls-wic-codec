<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Build to a folder outside the source folders, making it easier to clean. -->
    <OutDir>$(MSBuildThisFileDirectory)bin\$(Configuration)\$(Platform)\</OutDir>

    <!-- C++ temp files can be redirected. -->
    <IntDir>$(MSBuildThisFileDirectory)intermediate\$(MSBuildProjectName)\$(Platform)\$(Configuration)\</IntDir>

    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>

    <!-- Default character set is Unicode (UTF16), defines _UNICODE and UNICODE. -->
    <CharacterSet>Unicode</CharacterSet>

    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)default.ruleset</CodeAnalysisRuleSet>

    <!-- Assist VC package manager which configuration to use (checked is debug+static checking) -->
    <VcpkgConfiguration Condition="'$(Configuration)' == 'Checked'">Debug</VcpkgConfiguration>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ClCompile>
      <!-- Use all cores to speed up the compilation (MS recommended best practice). -->
      <MultiProcessorCompilation>true</MultiProcessorCompilation>

      <!-- Explicit define that all projects are compiled according the C++17 standard -->
      <LanguageStandard>stdcpp17</LanguageStandard>

      <!-- Explicit disable non conforming MSVC compiler options that are not compatible with the C++ standard -->
      <ConformanceMode>true</ConformanceMode>

      <!-- To ensure high quality C++ code use Warning level All and treat warnings as errors to ensure warnings are fixed promptly. -->
      <WarningLevel>EnableAllWarnings</WarningLevel>
      <TreatWarningAsError>true</TreatWarningAsError>
      <UseFullPaths>true</UseFullPaths>      

      <!--
        Disable level All warnings that are not useful:
        C4061 = enumerator 'identifier' in switch of enum 'enumeration' is not explicitly handled by a case label
        C4365 = action' : conversion from 'type_1' to 'type_2', signed/unsigned mismatch
        C4464 = A #include directive has a path that includes a '..' parent directory specifier. [Just informational]
        C4514 = function' : unreferenced inline function has been removed [Just informational]
        C4571 = Informational: catch(...) semantics changed since Visual C++ 7.1; structured exceptions (SEH) are no longer caught [Just informational]
        C4623 = derived class' : default constructor was implicitly defined as deleted because a base class default constructor is inaccessible or deleted [Just informational]
        C4625 = derived class' : copy constructor was implicitly defined as deleted because a base class copy constructor is inaccessible or deleted [Just informational]
        C4626 = derived class' : assignment operator was implicitly defined as deleted because a base class assignment operator is inaccessible or deleted [Just informational]
        C4668 = symbol' is not defined as a preprocessor macro, replacing with '0' for 'directives' [Just informational]
        C4686 = user-defined type' : possible change in behavior, change in UDT return calling convention [Seems to be false warning]
        C4710 = function '' function not inlined [Just informational]
        C4711 = function '' selected for automatic inline expansion [Just informational]
        C4738 = storing 32-bit float result in memory, possible loss of performance [Just informational]
        C4774 = ‘<function>’ : format string expected in argument <position> is not a string literal [Just informational]
        C4820 = bytes' bytes padding added after construct 'member_name' [Just informational]
        C5026 = 'type': move constructor was implicitly defined as deleted [Just informational]
        C5027 = 'type': move assignment operator was implicitly defined as deleted  [Just informational]
        C5039 = 'function': pointer or reference to potentially throwing function passed to extern C function under -EHc. [Just informational]
        C5045 = Compiler will insert Spectre mitigation for memory load if /Qspectre switch specified [Just informational]
      -->
      <DisableSpecificWarnings>4061;4365;4464;4514;4571;4623;4625;4626;4668;4686;4710;4711;4738;4774;4820;5026;5027;5039;5045</DisableSpecificWarnings>

      <!--
        __cplusplus = Tell MSVC to use the correct value for the __cplusplus macro
        throwingNew = Communicate with the compiler that only the throwing variant of operator new is used.
      -->
      <AdditionalOptions>
        /Zc:__cplusplus /Zc:throwingNew
      </AdditionalOptions>

      <!--
        * Windows SDK *
        WIN32_LEAN_AND_MEAN: Exclude includes from Windows.h that are seldom used.
        NOSERVICE: Exclude includes from Windows.h for Windows services (not used).
        NOMCX: Exclude includes for Modem Configuration Extensions from Windows.h (not used).
        NOIME: Exclude includes for Input Method Manager definitions from Windows.h (not used).
        NOMINMAX: Prevent that the Windows SDK header files define the macros min and max (conflict with C++ std::min\max).

        * WINRT *
        WINRT_NO_MAKE_DETECTION: Enable making COM class implementation final
        _SILENCE_CLANG_COROUTINE_MESSAGE: Supress warning that coroutine is not compatible wih clang (clang-tidy fix)
      -->
      <PreprocessorDefinitions>
        WIN32_LEAN_AND_MEAN;
        NOSERVICE;
        NOMCX;
        NOIME;
        NOMINMAX;
        WINRT_NO_MAKE_DETECTION;
        _SILENCE_CLANG_COROUTINE_MESSAGE;
        %(PreprocessorDefinitions)
      </PreprocessorDefinitions>

      <!-- Use by default precompiled headers with the modern name pch.h -->
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <PrecompiledHeader>Use</PrecompiledHeader>
    </ClCompile>

    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <TreatLinkerWarningAsErrors>true</TreatLinkerWarningAsErrors>
      <MinimumRequiredVersion>10</MinimumRequiredVersion>
    </Link>

  </ItemDefinitionGroup>

  <!-- Switch to full debug info when the environment variable VS_DEBUG_FULL_INFO is defined and not empty
       In debug builds, "fast" info is the default but the VS code coverage tool requires full info. -->
  <ItemDefinitionGroup Condition="'$(Configuration)'=='Debug'">
    <Link Condition="'$(VS_DEBUG_FULL_INFO)'!=''">
      <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <RunCodeAnalysis>true</RunCodeAnalysis>
    <EnableCppCoreCheck>true</EnableCppCoreCheck>
    <EnableMicrosoftCodeAnalysis>true</EnableMicrosoftCodeAnalysis>
    <EnableClangTidyCodeAnalysis>false</EnableClangTidyCodeAnalysis>
  </PropertyGroup>

  <ItemDefinitionGroup Condition="'$(Configuration)'=='Release'">
    <ClCompile>
      <!-- For release builds, enable the MS static analyzer build into the C++ compiler. -->
      <EnablePREfast>true</EnablePREfast>
    </ClCompile>
  </ItemDefinitionGroup>
</Project>